Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Api = function () {
  function Api() {
    _classCallCheck(this, Api);
  }

  _createClass(Api, null, [{
    key: 'headers',
    value: function headers() {
      return {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'dataType': 'json'
      };
    }
  }, {
    key: 'get',
    value: function get(route) {
      return this.xhr(route, null, 'GET');
    }
  }, {
    key: 'put',
    value: function put(route, params) {
      return this.xhr(route, params, 'PUT');
    }
  }, {
    key: 'post',
    value: function post(route, params) {
      return this.xhr(route, params, 'POST');
    }
  }, {
    key: 'delete',
    value: function _delete(route, params) {
      return this.xhr(route, params, 'DELETE');
    }
  }, {
    key: 'xhr',
    value: function xhr(route, params, verb) {
      var host = 'http://www.recipepuppy.com';
      var url = '' + host + route;
      var options = _extends({ method: verb }, params ? { body: JSON.stringify(params) } : null);
      options.headers = Api.headers();
      return fetch(url, options).then(function (resp) {
        var json = resp.json();
        if (resp.ok) {
          return json;
        }
        return json.then(function (err) {
          throw err;
        });
      }).then(function (json) {
        return json.results;
      });
    }
  }]);

  return Api;
}();

exports.default = Api;